}
switches
for (i in 1:length(switches)){
if (i %% 1 == 0){
switches[i] <- switches[i] * -1
}
if (i %% 2 == 0){
switches[i] <- switches[i] * -1
}
}
switches
for (i in 1:length(switches)){
person_in_the_room <- 1
if (i %% person_in_the_room == 0){
switches[i] <- switches[i] * -1
}
person_in_the_room <- person_in_the_room + 1
}
switches
for (i in 1:length(switches)){
person_in_the_room <- 1
if (i %% 1 == 0){
switches[i] <- switches[i] * -1
}
if (i %% 2 == 0){
switches[i] <- switches[i] * -1
}
if (i %% 3 == 0){
switches[i] <- switches[i] * -1
}
}
switches
# Exercise 8 -----------------------------------------------------------------
# Room with switches
switches <- rep(-1, 100)
switches
person_in_the_room <- 1
while (person_in_the_room < length(switches)) {
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0){
switches[i] <- switches[i] * -1
}
}
person_in_the_room <- person_in_the_room + 1
}
switches
# Exercise 8 -----------------------------------------------------------------
# Room with switches
switches <- rep(-1, 100)
switches
person_in_the_room <- 1
while (person_in_the_room < length(switches)) {
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0){
switches[i] <- switches[i] * -1
}
}
person_in_the_room <- person_in_the_room + 1
}
for (i in 1: length(switches)){
if (switches[i] == 1){
print(i)
}
}
switches
# Exercise 8 -----------------------------------------------------------------
# Room with switches
switches <- rep(-1, 1)
switches
while (person_in_the_room <= 1) {
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0){
switches[i] <- switches[i] * -1
}
}
person_in_the_room <- person_in_the_room + 1
}
for (i in 1: length(switches)){
if (switches[i] == 1){
print(i)
}
}
switches
# Exercise 8 -----------------------------------------------------------------
# Room with switches
switches <- rep(-1, 100)
switches
person_in_the_room <- 1
while (person_in_the_room <= 1) {
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0){
switches[i] <- switches[i] * -1
}
}
person_in_the_room <- person_in_the_room + 1
}
for (i in 1: length(switches)){
if (switches[i] == 1){
print(i)
}
}
switches
while (person_in_the_room < 2) {
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0){
switches[i] <- switches[i] * -1
}
}
person_in_the_room <- person_in_the_room + 1
}
for (i in 1: length(switches)){
if (switches[i] == 1){
print(i)
}
}
switches
while (person_in_the_room < 3) {
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0){
switches[i] <- switches[i] * -1
}
}
person_in_the_room <- person_in_the_room + 1
}
for (i in 1: length(switches)){
if (switches[i] == 1){
print(i)
}
}
switches
while (person_in_the_room < 4) {
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0){
switches[i] <- switches[i] * -1
}
}
person_in_the_room <- person_in_the_room + 1
}
for (i in 1: length(switches)){
if (switches[i] == 1){
print(i)
}
}
switches
while (person_in_the_room < 3) {
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0){
switches[i] <- switches[i] * -1
}
}
person_in_the_room <- person_in_the_room + 1
}
for (i in 1: length(switches)){
if (switches[i] == 1){
print(i)
}
}
switches
# Exercise 8 -----------------------------------------------------------------
# Room with switches
switches <- rep(-1, 100)
switches
person_in_the_room <- 1
while (person_in_the_room < 3) {
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0){
switches[i] <- switches[i] * -1
}
}
person_in_the_room <- person_in_the_room + 1
}
for (i in 1: length(switches)){
if (switches[i] == 1){
print(i)
}
}
switches
while (person_in_the_room < 4) {
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0){
switches[i] <- switches[i] * -1
}
}
person_in_the_room <- person_in_the_room + 1
}
for (i in 1: length(switches)){
if (switches[i] == 1){
print(i)
}
}
switches
while (person_in_the_room < length(switches)) {
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0){
switches[i] <- switches[i] * -1
}
}
person_in_the_room <- person_in_the_room + 1
}
for (i in 1: length(switches)){
if (switches[i] == 1){
print(i)
}
}
switches
# Exercise 8 -----------------------------------------------------------------
# Room with switches
switches <- rep(-1, 100)
person_in_the_room <- 1
while (person_in_the_room < length(switches)) {
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0)
switches[i] <- switches[i] * -1
}
person_in_the_room <- person_in_the_room + 1
}
for (i in 1: length(switches)){
if (switches[i] == 1) print(i)
}
# Exercise 8 -----------------------------------------------------------------
# Room with switches
switches <- rep(-1, 100)
person_in_the_room <- 1
while (person_in_the_room < length(switches)){
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0)
switches[i] <- switches[i] * -1 }
person_in_the_room <- person_in_the_room + 1 }
for (i in 1: length(switches)){
if (switches[i] == 1) print(i) }
#--- Lecture 4 ---
rm(list = ls())
#### Exercise 5: -------------------------------------------------------------
### Task 5 modified: scrivere una funzione che calcola il tempo di restiruzione
#di un prestito di 1000 euro a un tasso di interesse debitorio annuo
#dell'11% e prevede versamenti mensili di 12 euro
periodo_di_restituzione <- function(tasso, periodo, debito_iniziale, quota){
frazione <- 1 / periodo
n <- floor (durata/frazione)
tempo <- 0
debito <- debito_iniziale
while (debito > 0){
tempo <- tempo + frazione
debito <- debito * (1 + tasso * frazione) - quota
# The following condition avoid to print negative values
if (debito < 0){
debito <- 0
}
print(c(round(tempo, 2), round(debito, 2)))
}
cat("Il prestito sarà estinto in", tempo, "anni", "\n")
return("Tempo di restituzione:" <- tempo)
}
periodo_di_restituzione(.11, 12, 1000, 12)
#### Programmazione vettoriale ------------------------------------------------
a <- c(1:10)
a
b <- 100:105
b
# If a is greater than 5 print a, else print b
ifelse(a > 5, a, b)
# Sum of the first n squared numbers
# Without cycle
n <- 100
s <- 0
for (i in 1:n)
s <- s + i^2
s
# With cycle
sum((1:n)^2)
# Example
x <- c(-2, -1, 1, 2)
ifelse(x > 0, "Positive", "Negative")
# Example
x <- c(10, 20, 5, 30, 15)
constrain <- x > 15
ifelse(constrain, x^2, x^3)
# pmin and pmax functions
pmin(c(1, 2,3) , c(3, 2,1), c(2,2,2))
pmax(c(1, 2,3) , c(3, 2,1), c(2,2,2))
a <- c(1:10)
b <- c(15:20)
ifelse(a > 5, a, b)
#### Pseudocodifica ----------------------------------------------------------
# Example
x <- 3
for (i in 1:3){
show(x)
if (x %% 2 == 0){
x <- x / 2
} else {
x <- 3 * x + 1
}
}
show(x)
x <- 3
for (i in 1:3){
cat("At iteration", i, "the value of x is:", x, '\n')
if(x %% 2 == 0){
cat("Iteration", i, "satisfy the first condition", "\n\n")
x <- x / 2
} else{
cat("Iteration", i, "satisfy the second condition", "\n\n")
x <- 3 * x + 1
}
}
#### Exercises ---------------------------------------------------------------
# Exercise 1: Write a function and plot the results --------------------------
function_1 <- function(x){
if (x <= 0){
y <- -x^3
} else if(x > 0 && x <= 1){
y <- x^2
} else {
y <- sqrt(x)
}
return(y)
}
input_1 <- seq(-2, 2, 0.1)
output_1 <- vector()
for (i in 1 : length(input_1)){
output_1[i] <- function_1(input_1[i])
}
plot(input_1, output_1,
type = "l",
xlab = "Input",
ylab = "Output",
main = "Exercise 1",
col="blue")
# Exercise 2a: Write a function using a for cycle, while cycle and no cycles.---
x1 <- 0.3
n1 <- 55
x2 <- 6.6
n2 <- 8
function_2a <- function(x, n){
result <- 0
for (i in 0: n){
result <- result + x^i
}
return(result)
}
output_2a <- function_2a(x1, n1)
output_2b <- function_2a(x2, n2)
output_2a
output_2b
# 2b
function_2b <- function(x, n){
result <- 0
if (x == 1){
result <- n + 1
} else {
result <- (1 - x^(n - 1)) / (1 - x)
}
return(result)
}
output_2a <- function_2b(x1, n1)
output_2b <- function_2b(x2, n2)
output_2a
output_2b
# 2c: write the first function using a while loop
function_2_while <- function(x, n){
result <- 0
counter <- 0
while (counter < n){
result <- result + x^counter
counter <- counter + 1
}
return(result)
}
output_2a <- function_2_while(x1, n1)
output_2b <- function_2_while(x2, n2)
output_2a
output_2b
# 2d: write the first function without loops
function_2_no_cycle <- function(x, n){
result <- 0
result <- sum(x^(0:n))
return(result)
}
output_2a <- function_2_no_cycle(x1, n1)
output_2b <- function_2_no_cycle(x2, n2)
output_2a
output_2b
# Exercise 3 -----------------------------------------------------------------
my_vector <- c(1:10)
n <- 10
## Arithmetic average
ma <- mean(vettore)
ma
mg <- function(x, n){
result <- 1
for (i in 1:n){
result <- (result * x[i])
}
result <- result ^ (1 / n)
return(result)
}
test <- mg(my_vector, n)
test
# With vectors
mg <- prod((my_vector))^(1/length(my_vector))
mg
## Harmonic averate with vectors
mh <- (sum(1 / my_vector) ^ (-1)) * length(my_vector)
mh
# Verify the following relationship: ma ≥ mg ≥ mh
(ma >= mg) & (mg >= mh)
# Exercise 4 -----------------------------------------------------------------
# Calculate the average of the elements in positions multiple of 3
my_vector <- sample(100, 12)
my_vector
function_4 <- function(x){
result <- 0
for (i in 1:length(x)){
if (i %% 3 == 0){
result <- result + x[i]
}
}
return(result)
}
result <- function_4(my_vector)
result
# Exercise 5 -----------------------------------------------------------------
# Create a function to find a minimun of a vector
my_vector <- sample(100, 5)
my_vector
minimun <- function(x){
min <- x[1]
for (i in 1:length(x)){
if (x[i] < min){
min <- x[i]
}
}
return(min)
}
test <- minimun(my_vector)
test
# Exercise 6 -----------------------------------------------------------------
# Create a function to sort a vector
my_vector_1 <- sample(100, 5)
my_vector_2 <- sample(100, 5)
sorting <- function(vector_1, vector_2, x){
x <- c(vector_1, vector_2)
for (i in 1: (length(x) - 1)){
for (j in 1: (length(x) - i))
if (x[j] > x[j + 1]){
temp <- x[j]
x[j] <- x[j + 1]
x[j + 1] <- temp
}
}
return(x)
}
result <- sorting(my_vector_3)
result
# Exercise 7 -----------------------------------------------------------------
# Write a code to perform the nut game.
# x <- sum(ceiling (6*runif (2))) # this is the function suggested from teacher
nut_1 <- sample(12, 1)
nut_2 <- sample(12, 1)
nut_1
nut_2
nut_game <- function(nut1, nut2){
cat("Your numbers are:", nut1, "and", nut2, "\n")
flag <- TRUE
nut_sum1 <- nut1 + nut2
cat("Sum at first attemp: ", nut_sum1, "\n")
if (nut_sum1 == 7 || nut_sum1 == 11){
cat("First attempt \n")
cat("You win! You got ", nut1, "and", nut2, "\n")
} else if (nut_sum1 == 2 ||
nut_sum1 == 3 ||
nut_sum1 == 12){
cat("First attempt \n")
cat("You lose! You got ", nut1, "and", nut2, "\n")
} else {
iteration <- 1
while (flag == TRUE){
nut_1 <- sample(12, 1)
nut_2 <- sample(12, 1)
nut_sum2 <- nut_1 + nut_2
cat("At iteration", iteration,
"your numbers are:", nut_1, "and", nut_2, "\n")
iteration <- iteration + 1
if (nut_sum2 == nut_sum1){
cat("Second attempt \n")
cat("Your numbers are:", nut_1, "and", nut_2, "\n")
cat("You win! You got ", nut_1, "and", nut_2, "\n")
flag <- FALSE
}
if (nut_1 == 7 || nut2 == 7){
cat("Second attempt \n")
cat("Your numbers are:", nut_1, "and", nut_2, "\n")
cat("You lose! You got a 7! ", nut_1, "and", nut_2, "\n")
flag <- FALSE
}
}
}
}
game <- nut_game(sample(12, 1), sample(12, 1))
# Exercise 8 -----------------------------------------------------------------
# Room with switches
switches <- rep(-1, 100)
person_in_the_room <- 1
while (person_in_the_room < length(switches)){
for (i in 1: length(switches)){
if (i %% person_in_the_room == 0)
switches[i] <- switches[i] * -1 }
person_in_the_room <- person_in_the_room + 1 }
for (i in 1: length(switches)){
if (switches[i] == 1) print(i) }
install.packages(c("evaluate", "fansi", "foreign", "htmltools", "KernSmooth", "lattice", "Matrix", "mgcv", "nlme", "rpart", "spatial", "survival", "systemfonts", "tinytex"))
